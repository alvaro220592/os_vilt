Instalar Font Awesome Icons

    No terminal:
        npm i --save @fortawesome/fontawesome-svg-core
        npm i --save @fortawesome/free-solid-svg-icons
        npm i --save @fortawesome/free-regular-svg-icons
        npm i --save @fortawesome/free-brands-svg-icons

    no app.js
        import { library, dom } from "@fortawesome/fontawesome-svg-core";
        import { FontAwesomeIcon } from "@fortawesome/vue-fontawesome";
        import { fas } from '@fortawesome/free-solid-svg-icons'
        import { fab } from '@fortawesome/free-brands-svg-icons';
        import { far } from '@fortawesome/free-regular-svg-icons';
        library.add(fas, far, fab)
        dom.watch();

    createApp(App)
        .component("font-awesome-icon", FontAwesomeIcon)
        .mount('#app')

    No componente:
        <i class="fa-solid fa-arrow-left"></i>
        <i class="fa-brands fa-facebook"></i>

======================================================

DICAS DE ESTRUTURA PARA O SISTEMA

Página Inicial: onde o usuário pode ter uma visão geral do sistema, com informações sobre o número de produtos em manutenção, as tarefas pendentes, etc.

Gerenciamento de Clientes: nesta seção, é possível gerenciar informações sobre os clientes da empresa, incluindo seu nome, endereço, telefone, e-mail, etc.

Gerenciamento de Produtos: nesta seção, é possível gerenciar informações sobre os produtos eletrônicos que estão em manutenção, incluindo marca, modelo, número de série, data de entrada, data de saída, etc.

Status da Manutenção: aqui, é possível monitorar o status de cada produto em manutenção, desde a sua chegada até a sua conclusão.

Histórico de Manutenção: nesta seção, é possível acessar o histórico de manutenção de cada produto, incluindo o tipo de reparo realizado, o tempo de reparo, o custo do serviço, entre outras informações.

Agendamento de Serviços: nesta seção, é possível agendar um serviço de manutenção para um produto específico, definindo a data e hora em que o serviço será realizado.

Orçamentos e Faturamento: nesta seção, é possível gerar orçamentos para os clientes e faturar os serviços realizados.

Relatórios e Estatísticas: nesta seção, é possível gerar relatórios sobre o desempenho do sistema, incluindo estatísticas sobre o número de produtos em manutenção, a duração média do reparo, o custo médio do serviço, entre outras informações.

Configurações: nesta seção, é possível configurar as opções do sistema, como a moeda utilizada para faturamento, as permissões de acesso dos usuários, etc.

---------------------------------------------------------------------------------------------------------------------------------------------
SOBRE OS MATERIAIS DO ESTABELECIMENTO USADOS NAS O.S.'s. Essa relação pode ser chamada de herança entre tabelas, pois os registros da tabela mãe funcionam como classes com dados gerais, equanto os registros da tabela filha funcionam como objetos destas classes

Terá uma tabela mãe de materiais, que terá campos como 
    ID: Identificador único do material.
    Nome: Nome do material.
    Descrição: Uma descrição mais detalhada do material.
    Unidade de medida(id chave estrangeira): A unidade de medida na qual o material é quantificado (ex: peça, metro, litro, etc.).
    Preço: O preço unitário do material.
    qtde_estoque: Quantidade disponível em estoque desse material.
    estoque_critico: Número em que se considera que há poucas unidades
    timestamps

Terá uma tabela filha dos materiais, que trará informações específicas de cada unidade de um material como placa mãe, por exemplo. Terá campos como:
    ID: Identificador único do material específico.
    ID da tabela mãe: Chave estrangeira que referencia o material na tabela mãe.
    Número de série: O número de série exclusivo para cada material específico.
    Localização(id chave estrangeira): Um campo para registrar a localização física do material, se necessário.
    Data de fabricação: A data em que o material específico foi fabricado.
    Data de aquisição: A data em que o material específico foi adquirido.
    material_status_id(id chave estrangeira): Um campo para registrar o status do material específico (em uso, em manutenção, disponível, etc.).
    Observações: Qualquer informação adicional relevante sobre o material específico.
    Fornecedor: O nome ou ID do fornecedor do material.
    timestamps
---------------------------------------------------------------------------------------------------------------------------------------------

 =================================================================================
|
|   SOLUÇÃO DO PROBLEMA DO router.ts: Uncaught (in promise) TypeError: this.resolveComponent is not a function at n2.setPage (router.ts:378:33) at router.ts:323:19
|
|   parei o servidor npm, dei um npm run build, depois um npm run dev
|   no app.js, troquei "import { createInertiaApp } from '@inertiajs/vue3';" por import { createInertiaApp } from '@inertiajs/inertia-vue3';
|
|   A importação do { Link } vem do mesmo lugar, então fiz a mesma substituição onde chama esse componente
|
 =======================================================================================

 instalar sweetalert2:
    npm install sweetalert2

    import Swal from 'sweetalert2';
    Swal.fire('Olá!', 'Este é um exemplo de alerta.', 'success');